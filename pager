#!/usr/bin/perl -w

use strict;
use warnings;
use CGI '3.30', ();
use CGI::Carp qw( fatalsToBrowser );
use File::Copy;


############################
#
#  Some default configs
#
############################

my @guys=['person1','person2','person3'];
my $pagerFolder='/etc/nagios3/onduty';
my $guyFolder='/etc/nagios3/onduty';




my $apititle = 'us-east-a1 pager interface';
my $fromMSG  = '<b>Amazon said: </b>';

my $q = CGI->new;

############ DEFAUL REST MATCH API #########

sub GET($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'GET' or $q->request_method eq 'HEAD';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub POST($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'POST';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub PUT($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'PUT';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub DELETE($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'DELETE';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

####################################
#
#### EVALUATION OF METHOD ##########

eval {
# No arguments provided, default response

    GET qr{^$} => sub {
        print $q->header(-status=>200, -type=>'text/html');
        print $q->start_html(-title=>$apititle);
        print $q->p('Please give me some infos...');
        print $q->end_html();
    };

    GET qr{^/newguy$} => sub {
        print $q->header(-status=>200, -type=>'text/html');
        print $q->start_html(-title=>$apititle);
        print $q->h1('The new lucky guy is: ... to do?');
        print $q->end_html();
    };

# POSTdata, change the luky guy

    POST qr{^/newguy$} => sub {
        my ($group,$guy) = split('=',$q->param( 'POSTDATA' ));
        my ($status, $text);
        if ( $guy ~~ @guys ) {
            my $error = system("ln -sf $guyFolder/$group/$guy.pager $pagerFolder/onduty-$group");
            if ( $error == 0 ) {
                $status='200';
                $text="$fromMSG The lucky guy is <em>$guy</em>" ;
            } else {
                $status='200';
                $text="$fromMSG Something went wrong, the lucky guy is not so lucky. ERROR: $error";
            }
        } else {
            $status='200';
            $text="$fromMSG Something not match";

        }
        print $q->header(-status=>$status, -type=>'text/html');
        print $q->start_html(-title=>$apititle);
        print $q->p($text);
        print $q->end_html();
    };

# Unmatched REST, POST and GET
# Nothing handles this, throw back a standard 404

    POST qr{^/(.+)$} => sub {
        print $q->header(-status=>404, -type=>'text/html');
        print $q->start_html(-title=>$apititle);
        print $q->h1('... something wrong? ');
        print $q->end_html();
    };


    GET qr{^/(.+)$} => sub {
        print $q->header(-status=>404, -type=>'text/html');
        print $q->start_html(-title=>$apititle);
        print $q->h1('Thank you');
        print $q->end_html;
    };

exit;
};


#### SOME MAGICS

if ($@) {
# Handle errors
if (ref $@ and reftype $@ eq 'HASH') {
    my $ERROR = $@;
    print $q->header(-status=>$ERROR->{status}, -type=>'text/html');
    print $q->h1($ERROR->{title});
    print $q->p($ERROR->{message}) if $ERROR->{message};
    print $q->end_html;
}

# Handle anything else
else {
# Nothing handles this, throw back a standard 404
    print $q->header(-status=>404, -type=>'text/html');
    print $q->start_html(-title=>$apititle);
    print $q->h1('mmmh... you dont want this... ');
    print $q->end_html;
}
exit;
}
